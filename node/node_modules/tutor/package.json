{
  "name": "tutor",
  "version": "0.4.0",
  "description": "Interface for Gatherer, the Magic: The Gathering card database",
  "repository": {
    "type": "git",
    "url": "git://github.com/davidchambers/tutor.git"
  },
  "contributors": [
    {
      "name": "David Chambers",
      "email": "dc@hashify.me",
      "url": "http://davidchambersdesign.com"
    },
    {
      "name": "Nick Novitski",
      "email": "nicknovitski@gmail.com",
      "url": "http://www.nicknovitski.com"
    },
    {
      "name": "Pablo Castellazzi",
      "email": "pablo.castellazzi@gmail.com",
      "url": "https://bitbucket.org/pcastellazzi"
    },
    {
      "name": "Rob Dennis",
      "email": "rdennis@gmail.com",
      "url": "https://github.com/rdennis463"
    }
  ],
  "main": "./lib/tutor",
  "bin": {
    "tutor": "./bin/tutor"
  },
  "dependencies": {
    "cheerio": "0.10.x",
    "commander": "1.1.x",
    "entities": "0.1.x",
    "request": "2.12.x"
  },
  "devDependencies": {
    "coffee-script": "1.6.x",
    "mocha": "1.8.x",
    "nock": "0.16.x",
    "should": "1.2.x"
  },
  "readme": "<img alt=\"Tutor\" src=\"https://raw.github.com/davidchambers/tutor/master/logo@2x.png\" width=\"852\" height=\"215\" />\n\n[Gatherer][1] is the canonical source for _Magic: The Gathering_ card details.\nWhile useful, it lacks an interface for retrieving this data programmatically.\nThe lack of an API makes creating _Magic_-related applications unnecessarily\ndifficult.\n\nTutor is a simple JavaScript interface for Gatherer.\n\n### API\n\n  - [tutor.card](#tutorcard)\n  - [tutor.set](#tutorset)\n  - [tutor.formats](#tutorformats)\n  - [tutor.sets](#tutorsets)\n  - [tutor.types](#tutortypes)\n\n### tutor.card\n\n    tutor.card(id, callback(err, card))\n    tutor.card(name, callback(err, card))\n    tutor.card(details, callback(err, card))\n\nThe first and second forms are shorthand for `tutor.card({id: id}, ...)` and\n`tutor.card({name: name}, ...)` respectively. The callback is passed an object\nrepresenting the specified card. Version-specific metadata such as flavor text\nand rarity are included for cards specified by id. Attributes not applicable\nto the card type (e.g. lands have no mana cost) or not present (e.g. certain\ncreatures have no rules text) are omitted.\n\n```coffeescript\ntutor.card 'Demonic Tutor', (err, card) ->\n  console.log card.name\n  # => \"Demonic Tutor\"\n  console.log card.mana_cost\n  # => \"{1}{B}\"\n  console.log card.text\n  # => \"Search your library for a card and put that card into your hand. Then shuffle your library.\"\n```\n\n#### Split cards\n\nBecause the two sides of a split card share a Gatherer id, it's necessary to\nprovide the name of the desired side:\n\n```coffeescript\ntutor.card id: 27165, name: 'Fire', (err, card) ->\n  console.log card.name\n  # => \"Fire\"\n\ntutor.card id: 27165, name: 'Ice', (err, card) ->\n  console.log card.name\n  # => \"Ice\"\n```\n\nRetrieving either side of a split card by name is straightforward:\n\n```coffeescript\ntutor.card 'Fire', (err, card) ->\n  console.log card.name\n  # => \"Fire\"\n\ntutor.card 'Ice', (err, card) ->\n  console.log card.name\n  # => \"Ice\"\n```\n\n#### Flip cards\n\nRetrieving the top half of a flip card by id is straightforward:\n\n```coffeescript\ntutor.card 247175, (err, card) ->\n  console.log card.name\n  # => \"Nezumi Graverobber\"\n```\n\nEither half of a flip card can be retrieved explicitly by setting `which` to\n`\"a\"` (for the upper half) or `\"b\"` (for the lower half):\n\n```coffeescript\ntutor.card id: 247175, which: 'b', (err, card) ->\n  console.log card.name\n  # => \"Nighteyes the Desecrator\"\n```\n\nWhen retrieving a flip card by name rather than id, one may simply provide the\nname of the desired half:\n\n```coffeescript\ntutor.card 'Nighteyes the Desecrator', (err, card) ->\n  console.log card.name\n  # => \"Nighteyes the Desecrator\"\n```\n\n#### Double-faced cards\n\nEither face of a double-faced card can be retrieved by id:\n\n```coffeescript\ntutor.card 262675, (err, card) ->\n  console.log card.name\n  # => \"Afflicted Deserter\"\n\ntutor.card 262698, (err, card) ->\n  console.log card.name\n  # => \"Werewolf Ransacker\"\n```\n\nOr by name:\n\n```coffeescript\ntutor.card 'Afflicted Deserter', (err, card) ->\n  console.log card.name\n  # => \"Afflicted Deserter\"\n\ntutor.card 'Werewolf Ransacker', (err, card) ->\n  console.log card.name\n  # => \"Werewolf Ransacker\"\n```\n\n### tutor.set\n\n    tutor.set(name, callback(err, set))\n\nScrape cards from the set specified by `name`. For example:\n\n```coffeescript\ntutor.set 'Homelands', (err, cards) ->\n  console.log cards.length\n  # => 115\n  console.log Object.keys(cards[0]).sort()\n  # => [\n  #   \"converted_mana_cost\",\n  #   \"expansion\",\n  #   \"gatherer_url\",\n  #   \"image_url\",\n  #   \"mana_cost\",\n  #   \"name\",\n  #   \"power\",\n  #   \"rarity\",\n  #   \"subtypes\",\n  #   \"supertypes\",\n  #   \"text\",\n  #   \"toughness\",\n  #   \"types\",\n  #   \"versions\"\n  # ]\n```\n\n### tutor.formats\n\n    tutor.formats(callback(err, formatNames))\n\nProvides the names of all the game's formats:\n\n```coffeescript\ntutor.formats (err, formatNames) ->\n  console.log formatNames\n  # => [\n  #   \"Classic\",\n  #   \"Commander\",\n  #   ...\n  #   \"Vintage\",\n  #   \"Zendikar Block\"\n  # ]\n```\n\n### tutor.sets\n\n    tutor.sets(callback(err, setNames))\n\nProvides the names of all the game's sets:\n\n```coffeescript\ntutor.sets (err, setNames) ->\n  console.log setNames\n  # => [\n  #   \"Alara Reborn\",\n  #   \"Alliances\",\n  #   ...\n  #   \"Worldwake\",\n  #   \"Zendikar\"\n  # ]\n```\n\n### tutor.types\n\n    tutor.types(callback(err, types))\n\nProvides the names of all the game's types:\n\n```coffeescript\ntutor.types (err, types) ->\n  console.log types\n  # => [\n  #   \"Artifact\",\n  #   \"Basic\",\n  #   ...\n  #   \"Vanguard\",\n  #   \"World\"\n  # ]\n```\n\n### CLI\n\n`npm install tutor --global` will make the `tutor` command available globally.\n\n    $ tutor card 'Demonic Tutor'\n    Demonic Tutor {1}{B} Search your library for a card and put that card into your hand. Then shuffle your library.\n\n    $ tutor card 'Demonic Tutor' --format json | python -mjson.tool | head -n 10\n    {\n        \"community_rating\": {\n            \"rating\": 4.714,\n            \"votes\": 229\n        },\n        \"converted_mana_cost\": 2,\n        \"languages\": {},\n        \"legality\": {\n            \"Commander\": \"Legal\",\n            \"Legacy\": \"Banned\",\n\n    $ tutor card 60 --format json | python -mjson.tool | head -n 10\n    {\n        \"artist\": \"Douglas Schuler\",\n        \"community_rating\": {\n            \"rating\": 4.917,\n            \"votes\": 109\n        },\n        \"converted_mana_cost\": 2,\n        \"expansion\": \"Limited Edition Alpha\",\n        \"languages\": {},\n        \"legality\": {\n\n    $ tutor set Alliances | head -n 2\n    Aesthir Glider {3} 2/1 Flying Aesthir Glider can't block.\n    Agent of Stromgald {R} 1/1 {R}: Add {B} to your mana pool.\n\n### Running the tests\n\n    make fixtures\n    make test\n    make testcli\n\n\n[1]: http://gatherer.wizards.com/\n",
  "readmeFilename": "README.md",
  "_id": "tutor@0.4.0",
  "dist": {
    "shasum": "2bcf1bc25cde607be239d7b8817cd2638bf9747b"
  },
  "_from": "tutor@0.4.0",
  "_resolved": "https://registry.npmjs.org/tutor/-/tutor-0.4.0.tgz"
}
